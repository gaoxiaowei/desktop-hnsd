From 2307adb1ef8e01540836996a2306f5a0a6b41bc4 Mon Sep 17 00:00:00 2001
From: Jonathon Hall <jhall@londontrustmedia.com>
Date: Tue, 21 May 2019 11:26:09 -0400
Subject: [PATCH 12/14] Release libuv resources correctly

---
 src/ns.c   | 45 +++++++++++++++++++++++----------------------
 src/ns.h   |  3 +--
 src/pool.c | 16 ++++++++++++----
 src/pool.h |  2 +-
 src/rs.c   | 47 ++++++++++++++++++++++-------------------------
 src/rs.h   |  3 +--
 6 files changed, 60 insertions(+), 56 deletions(-)

diff --git a/src/ns.c b/src/ns.c
index 1643201..6c3f694 100644
--- a/src/ns.c
+++ b/src/ns.c
@@ -21,6 +21,7 @@
 #include "req.h"
 #include "tld.h"
 #include "platform-net.h"
+#include "utils.h"
 #include "uv.h"
 
 /*
@@ -101,14 +102,13 @@ hsk_ns_init(hsk_ns_t *ns, const uv_loop_t *loop, const hsk_pool_t *pool) {
   ns->pool = (hsk_pool_t *)pool;
   hsk_addr_init(&ns->ip_);
   ns->ip = NULL;
-  ns->socket.data = (void *)ns;
+  ns->socket = NULL;
   ns->ec = ec;
   hsk_cache_init(&ns->cache);
   memset(ns->key_, 0x00, sizeof(ns->key_));
   ns->key = NULL;
   memset(ns->pubkey, 0x00, sizeof(ns->pubkey));
   memset(ns->read_buffer, 0x00, sizeof(ns->read_buffer));
-  ns->bound = false;
   ns->receiving = false;
 
   return HSK_SUCCESS;
@@ -119,8 +119,6 @@ hsk_ns_uninit(hsk_ns_t *ns) {
   if (!ns)
     return;
 
-  ns->socket.data = NULL;
-
   if (ns->ec) {
     hsk_ec_free(ns->ec);
     ns->ec = NULL;
@@ -175,25 +173,27 @@ hsk_ns_open(hsk_ns_t *ns, const struct sockaddr *addr) {
   if (!ns || !addr)
     return HSK_EBADARGS;
 
-  if (uv_udp_init(ns->loop, &ns->socket) != 0)
+  ns->socket = malloc(sizeof(uv_udp_t));
+  if (!ns->socket)
+    return HSK_ENOMEM;
+
+  if (uv_udp_init(ns->loop, ns->socket) != 0)
     return HSK_EFAILURE;
 
-  ns->socket.data = (void *)ns;
+  ns->socket->data = (void *)ns;
 
-  if (uv_udp_bind(&ns->socket, addr, 0) != 0)
+  if (uv_udp_bind(ns->socket, addr, 0) != 0)
     return HSK_EFAILURE;
 
-  ns->bound = true;
-
   int value = sizeof(ns->read_buffer);
 
-  if (uv_send_buffer_size((uv_handle_t *)&ns->socket, &value) != 0)
+  if (uv_send_buffer_size((uv_handle_t *)ns->socket, &value) != 0)
     return HSK_EFAILURE;
 
-  if (uv_recv_buffer_size((uv_handle_t *)&ns->socket, &value) != 0)
+  if (uv_recv_buffer_size((uv_handle_t *)ns->socket, &value) != 0)
     return HSK_EFAILURE;
 
-  if (uv_udp_recv_start(&ns->socket, alloc_buffer, after_recv) != 0)
+  if (uv_udp_recv_start(ns->socket, alloc_buffer, after_recv) != 0)
     return HSK_EFAILURE;
 
   ns->receiving = true;
@@ -215,18 +215,17 @@ hsk_ns_close(hsk_ns_t *ns) {
     return HSK_EBADARGS;
 
   if (ns->receiving) {
-    if (uv_udp_recv_stop(&ns->socket) != 0)
+    if (uv_udp_recv_stop(ns->socket) != 0)
       return HSK_EFAILURE;
     ns->receiving = false;
   }
 
-  if (ns->bound) {
-    uv_close((uv_handle_t *)&ns->socket, after_close);
-    ns->bound = false;
+  if (ns->socket) {
+    hsk_uv_close_free((uv_handle_t *)ns->socket);
+    ns->socket->data = NULL;
+    ns->socket = NULL;
   }
 
-  ns->socket.data = NULL;
-
   return HSK_SUCCESS;
 }
 
@@ -480,6 +479,11 @@ hsk_ns_send(
   hsk_send_data_t *sd = NULL;
   uv_udp_send_t *req = NULL;
 
+  if (!ns->socket) {
+    rc = HSK_EFAILURE;
+    goto fail;
+  }
+
   sd = (hsk_send_data_t *)malloc(sizeof(hsk_send_data_t));
 
   if (!sd) {
@@ -504,7 +508,7 @@ hsk_ns_send(
     { .base = (char *)data, .len = data_len }
   };
 
-  int status = uv_udp_send(req, &ns->socket, bufs, 1, addr, after_send);
+  int status = uv_udp_send(req, ns->socket, bufs, 1, addr, after_send);
 
   if (status != 0) {
     hsk_ns_log(ns, "failed sending: %s\n", uv_strerror(status));
@@ -602,9 +606,6 @@ after_recv(
 }
 
 static void
-after_close(uv_handle_t *handle) {}
-
-static void
 after_resolve(
   const char *name,
   int status,
diff --git a/src/ns.h b/src/ns.h
index 27d3317..b9d1797 100644
--- a/src/ns.h
+++ b/src/ns.h
@@ -25,14 +25,13 @@ typedef struct {
   hsk_pool_t *pool;
   hsk_addr_t ip_;
   hsk_addr_t *ip;
-  uv_udp_t socket;
+  uv_udp_t *socket;
   hsk_ec_t *ec;
   hsk_cache_t cache;
   uint8_t key_[32];
   uint8_t *key;
   uint8_t pubkey[33];
   uint8_t read_buffer[HSK_UDP_BUFFER];
-  bool bound;
   bool receiving;
 } hsk_ns_t;
 
diff --git a/src/pool.c b/src/pool.c
index 29411ff..656c8a8 100644
--- a/src/pool.c
+++ b/src/pool.c
@@ -159,6 +159,7 @@ hsk_pool_init(hsk_pool_t *pool, const uv_loop_t *loop) {
   hsk_timedata_init(&pool->td);
   hsk_chain_init(&pool->chain, &pool->td);
   hsk_addrman_init(&pool->am, &pool->td);
+  pool->timer = NULL;
   pool->peer_id = 0;
   hsk_map_init_map(&pool->peers, hsk_addr_hash, hsk_addr_equal, NULL);
   pool->head = NULL;
@@ -310,12 +311,16 @@ hsk_pool_open(hsk_pool_t *pool) {
   if (!pool)
     return HSK_EBADARGS;
 
-  pool->timer.data = (void *)pool;
+  pool->timer = malloc(sizeof(uv_timer_t));
+  if (!pool->timer)
+    return HSK_ENOMEM;
+
+  pool->timer->data = (void *)pool;
 
-  if (uv_timer_init(pool->loop, &pool->timer) != 0)
+  if (uv_timer_init(pool->loop, pool->timer) != 0)
     return HSK_EFAILURE;
 
-  if (uv_timer_start(&pool->timer, after_timer, 3000, 3000) != 0)
+  if (uv_timer_start(pool->timer, after_timer, 3000, 3000) != 0)
     return HSK_EFAILURE;
 
   hsk_pool_log(pool, "pool opened (size=%u)\n", pool->max_size);
@@ -330,9 +335,12 @@ hsk_pool_close(hsk_pool_t *pool) {
   if (!pool)
     return HSK_EBADARGS;
 
-  if (uv_timer_stop(&pool->timer) != 0)
+  if (uv_timer_stop(pool->timer) != 0)
     return HSK_EFAILURE;
 
+  hsk_uv_close_free((uv_handle_t*)pool->timer);
+  pool->timer = NULL;
+
   return HSK_SUCCESS;
 }
 
diff --git a/src/pool.h b/src/pool.h
index d8f58d1..7407e11 100644
--- a/src/pool.h
+++ b/src/pool.h
@@ -94,7 +94,7 @@ typedef struct hsk_pool_s {
   hsk_timedata_t td;
   hsk_chain_t chain;
   hsk_addrman_t am;
-  uv_timer_t timer;
+  uv_timer_t *timer;
   uint64_t peer_id;
   hsk_map_t peers;
   hsk_peer_t *head;
diff --git a/src/rs.c b/src/rs.c
index d7ba479..81ed566 100644
--- a/src/rs.c
+++ b/src/rs.c
@@ -70,9 +70,6 @@ after_recv(
 static void
 after_resolve(void *data, int status, struct ub_result *result);
 
-static void
-after_close(uv_handle_t *handle);
-
 /*
  * Recursive NS
  */
@@ -101,7 +98,7 @@ hsk_rs_init(hsk_rs_t *ns, const uv_loop_t *loop, const struct sockaddr *stub) {
 
   ns->loop = (uv_loop_t *)loop;
   ns->ub = ub;
-  ns->socket.data = (void *)ns;
+  ns->socket = NULL;
   ns->rs_worker = NULL;
   ns->ec = ec;
   ns->config = NULL;
@@ -111,7 +108,6 @@ hsk_rs_init(hsk_rs_t *ns, const uv_loop_t *loop, const struct sockaddr *stub) {
   ns->key = NULL;
   memset(ns->pubkey, 0x00, sizeof(ns->pubkey));
   memset(ns->read_buffer, 0x00, sizeof(ns->read_buffer));
-  ns->bound = false;
   ns->receiving = false;
   ns->stop_callback = NULL;
 
@@ -142,8 +138,6 @@ hsk_rs_uninit(hsk_rs_t *ns) {
   if (!ns)
     return;
 
-  ns->socket.data = NULL;
-
   if (ns->ec) {
     hsk_ec_free(ns->ec);
     ns->ec = NULL;
@@ -262,25 +256,27 @@ hsk_rs_open(hsk_rs_t *ns, const struct sockaddr *addr) {
   if (!hsk_rs_inject_options(ns))
     return HSK_EFAILURE;
 
-  if (uv_udp_init(ns->loop, &ns->socket) != 0)
+  ns->socket = malloc(sizeof(uv_udp_t));
+  if (!ns->socket)
+    return HSK_ENOMEM;
+
+  if (uv_udp_init(ns->loop, ns->socket) != 0)
     return HSK_EFAILURE;
 
-  ns->socket.data = (void *)ns;
+  ns->socket->data = (void *)ns;
 
-  if (uv_udp_bind(&ns->socket, addr, 0) != 0)
+  if (uv_udp_bind(ns->socket, addr, 0) != 0)
     return HSK_EFAILURE;
 
-  ns->bound = true;
-
   int value = sizeof(ns->read_buffer);
 
-  if (uv_send_buffer_size((uv_handle_t *)&ns->socket, &value) != 0)
+  if (uv_send_buffer_size((uv_handle_t *)ns->socket, &value) != 0)
     return HSK_EFAILURE;
 
-  if (uv_recv_buffer_size((uv_handle_t *)&ns->socket, &value) != 0)
+  if (uv_recv_buffer_size((uv_handle_t *)ns->socket, &value) != 0)
     return HSK_EFAILURE;
 
-  if (uv_udp_recv_start(&ns->socket, alloc_buffer, after_recv) != 0)
+  if (uv_udp_recv_start(ns->socket, alloc_buffer, after_recv) != 0)
     return HSK_EFAILURE;
 
   ns->receiving = true;
@@ -517,6 +513,11 @@ hsk_rs_send(
   hsk_send_data_t *sd = NULL;
   uv_udp_send_t *req = NULL;
 
+  if (!ns->socket) {
+    rc = HSK_EFAILURE;
+    goto fail;
+  }
+
   sd = (hsk_send_data_t *)malloc(sizeof(hsk_send_data_t));
 
   if (!sd) {
@@ -541,7 +542,7 @@ hsk_rs_send(
     { .base = (char *)data, .len = data_len }
   };
 
-  int status = uv_udp_send(req, &ns->socket, bufs, 1, addr, after_send);
+  int status = uv_udp_send(req, ns->socket, bufs, 1, addr, after_send);
 
   if (status != 0) {
     hsk_rs_log(ns, "failed sending: %s\n", uv_strerror(status));
@@ -592,17 +593,16 @@ after_worker_stop(void *data) {
   }
 
   if (ns->receiving) {
-    uv_udp_recv_stop(&ns->socket);
+    uv_udp_recv_stop(ns->socket);
     ns->receiving = false;
   }
 
-  if (ns->bound) {
-    uv_close((uv_handle_t *)&ns->socket, after_close);
-    ns->bound = false;
+  if (ns->socket) {
+    hsk_uv_close_free((uv_handle_t *)ns->socket);
+    ns->socket->data = NULL;
+    ns->socket = NULL;
   }
 
-  ns->socket.data = NULL;
-
   if (ns->ub) {
     ub_ctx_delete(ns->ub);
     ns->ub = NULL;
@@ -683,6 +683,3 @@ after_resolve(void *data, int status, struct ub_result *result) {
   hsk_dns_req_free(req);
   ub_resolve_free(result);
 }
-
-static void
-after_close(uv_handle_t *handle) {}
diff --git a/src/rs.h b/src/rs.h
index 4fbd774..cb8e1bc 100644
--- a/src/rs.h
+++ b/src/rs.h
@@ -18,7 +18,7 @@
 typedef struct {
   uv_loop_t *loop;
   struct ub_ctx *ub;
-  uv_udp_t socket;
+  uv_udp_t *socket;
   hsk_rs_worker_t *rs_worker;
   hsk_ec_t *ec;
   char *config;
@@ -28,7 +28,6 @@ typedef struct {
   uint8_t *key;
   uint8_t pubkey[33];
   uint8_t read_buffer[4096];
-  bool bound;
   bool receiving;
   void *stop_data;
   void (*stop_callback)(void *);
-- 
2.7.4

