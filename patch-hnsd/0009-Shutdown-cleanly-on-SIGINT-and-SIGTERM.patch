From 4e75a5e2f95d3780620f3c610c4b5513d0c9ea81 Mon Sep 17 00:00:00 2001
From: Jonathon Hall <jhall@londontrustmedia.com>
Date: Thu, 9 May 2019 14:44:08 -0400
Subject: [PATCH 09/14] Shutdown cleanly on SIGINT and SIGTERM

---
 Makefile.am     |   3 +-
 src/daemon.c    | 240 +++++++++++++++++++++++++++++++++++++++++---------------
 src/rs.c        |  89 ++++++++++++---------
 src/rs.h        |   9 ++-
 src/rs_worker.c | 210 ++++++++++++++++++++++++++++++++++---------------
 src/rs_worker.h |  35 ++++++++-
 src/signals.c   | 124 +++++++++++++++++++++++++++++
 src/signals.h   |  40 ++++++++++
 src/utils.c     |  13 +++
 src/utils.h     |   9 +++
 10 files changed, 598 insertions(+), 174 deletions(-)
 create mode 100644 src/signals.c
 create mode 100644 src/signals.h

diff --git a/Makefile.am b/Makefile.am
index b820ba3..691e16b 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -67,7 +67,8 @@ hnsd_SOURCES = src/cache.c  \
                src/daemon.c \
                src/ns.c     \
                src/rs.c     \
-               src/rs_worker.c
+               src/rs_worker.c \
+               src/signals.c
 
 hnsd_LDADD = $(LIB_UNBOUND)             \
              $(top_builddir)/libhsk.la
diff --git a/src/daemon.c b/src/daemon.c
index c027127..c476e55 100644
--- a/src/daemon.c
+++ b/src/daemon.c
@@ -16,6 +16,7 @@
 #include "pool.h"
 #include "ns.h"
 #include "rs.h"
+#include "signals.h"
 #include "uv.h"
 #include "platform-net.h"
 
@@ -368,130 +369,245 @@ print_identity(const uint8_t *key) {
 }
 
 /*
- * Main
+ * Daemon
  */
+typedef struct {
+  hsk_signals_t *signals;
+  hsk_pool_t *pool;
+  hsk_ns_t *ns;
+  hsk_rs_t *rs;
+} hsk_daemon_t;
 
-int
-main(int argc, char **argv) {
-  hsk_options_t opt;
-  hsk_options_init(&opt);
+static void
+hsk_daemon_after_close(void *data);
+static void
+hsk_daemon_signal_shutdown(void *data);
 
-  parse_arg(argc, argv, &opt);
+int
+hsk_daemon_init(hsk_daemon_t *daemon, uv_loop_t *loop, hsk_options_t *opt) {
+  daemon->signals = NULL;
+  daemon->pool = NULL;
+  daemon->ns = NULL;
+  daemon->rs = NULL;
 
   int rc = HSK_SUCCESS;
-  uv_loop_t *loop = NULL;
-  hsk_pool_t *pool = NULL;
-  hsk_ns_t *ns = NULL;
-  hsk_rs_t *rs = NULL;
 
-  if (opt.identity_key) {
-    if (!print_identity(opt.identity_key)) {
-      fprintf(stderr, "invalid identity key\n");
-      rc = HSK_EFAILURE;
-      goto done;
-    }
-  }
+  daemon->signals = hsk_signals_alloc(loop, (void *)daemon,
+                                      hsk_daemon_signal_shutdown);
 
-  loop = uv_default_loop();
-
-  if (!loop) {
-    fprintf(stderr, "failed initializing loop\n");
+  if (!daemon->signals) {
+    fprintf(stderr, "failed initializing signal handlers\n");
     rc = HSK_EFAILURE;
-    goto done;
+    goto fail;
   }
 
-  pool = hsk_pool_alloc(loop);
+  daemon->pool = hsk_pool_alloc(loop);
 
-  if (!pool) {
+  if (!daemon->pool) {
     fprintf(stderr, "failed initializing pool\n");
     rc = HSK_ENOMEM;
-    goto done;
+    goto fail;
   }
 
-  if (opt.identity_key) {
-    if (!hsk_pool_set_key(pool, opt.identity_key)) {
+  if (opt->identity_key) {
+    if (!hsk_pool_set_key(daemon->pool, opt->identity_key)) {
       fprintf(stderr, "failed setting identity key\n");
       rc = HSK_EFAILURE;
-      goto done;
+      goto fail;
     }
   }
 
-  if (!hsk_pool_set_size(pool, opt.pool_size)) {
+  if (!hsk_pool_set_size(daemon->pool, opt->pool_size)) {
     fprintf(stderr, "failed setting pool size\n");
     rc = HSK_EFAILURE;
-    goto done;
+    goto fail;
   }
 
-  if (!hsk_pool_set_seeds(pool, opt.seeds)) {
+  if (!hsk_pool_set_seeds(daemon->pool, opt->seeds)) {
     fprintf(stderr, "failed adding seeds\n");
     rc = HSK_EFAILURE;
-    goto done;
+    goto fail;
   }
 
-  ns = hsk_ns_alloc(loop, pool);
+  daemon->ns = hsk_ns_alloc(loop, daemon->pool);
 
-  if (!ns) {
+  if (!daemon->ns) {
     fprintf(stderr, "failed initializing ns\n");
     rc = HSK_ENOMEM;
-    goto done;
+    goto fail;
   }
 
-  if (!hsk_ns_set_ip(ns, opt.ns_ip)) {
+  if (!hsk_ns_set_ip(daemon->ns, opt->ns_ip)) {
     fprintf(stderr, "failed setting ip\n");
     rc = HSK_EFAILURE;
-    goto done;
+    goto fail;
   }
 
-  if (opt.identity_key) {
-    if (!hsk_ns_set_key(ns, opt.identity_key)) {
+  if (opt->identity_key) {
+    if (!hsk_ns_set_key(daemon->ns, opt->identity_key)) {
       fprintf(stderr, "failed setting identity key\n");
       rc = HSK_EFAILURE;
-      goto done;
+      goto fail;
     }
   }
 
-  rs = hsk_rs_alloc(loop, opt.ns_host);
+  daemon->rs = hsk_rs_alloc(loop, opt->ns_host);
 
-  if (!rs) {
+  if (!daemon->rs) {
     fprintf(stderr, "failed initializing rns\n");
     rc = HSK_ENOMEM;
-    goto done;
+    goto fail;
   }
 
-  if (opt.rs_config) {
-    if (!hsk_rs_set_config(rs, opt.rs_config)) {
+  if (opt->rs_config) {
+    if (!hsk_rs_set_config(daemon->rs, opt->rs_config)) {
       fprintf(stderr, "failed setting rs config\n");
       rc = HSK_EFAILURE;
-      goto done;
+      goto fail;
     }
   }
 
-  if (opt.identity_key) {
-    if (!hsk_rs_set_key(rs, opt.identity_key)) {
+  if (opt->identity_key) {
+    if (!hsk_rs_set_key(daemon->rs, opt->identity_key)) {
       fprintf(stderr, "failed setting identity key\n");
       rc = HSK_EFAILURE;
-      goto done;
+      goto fail;
     }
   }
 
-  rc = hsk_pool_open(pool);
+  return HSK_SUCCESS;
+
+fail:
+  hsk_daemon_after_close((void *)daemon);
+  return rc;
+}
+
+int
+hsk_daemon_open(hsk_daemon_t *daemon, hsk_options_t *opt) {
+  int rc = HSK_SUCCESS;
+
+  rc = hsk_pool_open(daemon->pool);
 
   if (rc != HSK_SUCCESS) {
     fprintf(stderr, "failed opening pool: %s\n", hsk_strerror(rc));
-    goto done;
+    return rc;
   }
 
-  rc = hsk_ns_open(ns, opt.ns_host);
+  rc = hsk_ns_open(daemon->ns, opt->ns_host);
 
   if (rc != HSK_SUCCESS) {
     fprintf(stderr, "failed opening ns: %s\n", hsk_strerror(rc));
-    goto done;
+    return rc;
   }
 
-  rc = hsk_rs_open(rs, opt.rs_host);
+  rc = hsk_rs_open(daemon->rs, opt->rs_host);
 
   if (rc != HSK_SUCCESS) {
     fprintf(stderr, "failed opening rns: %s\n", hsk_strerror(rc));
+    return rc;
+  }
+
+  return HSK_SUCCESS;
+}
+
+// After hsk_daemon_init() is called (even if it fails), test if the daemon has
+// been destroyed.
+bool
+hsk_daemon_destroyed(hsk_daemon_t *daemon) {
+  // signals is created first, so just check that.
+  return !daemon->signals;
+}
+
+void
+hsk_daemon_close(hsk_daemon_t *daemon) {
+  // If the daemon has already been destroyed, do nothing.
+  if (hsk_daemon_destroyed(daemon))
+    return;
+
+  // Stop the recursive nameserver to shut down.  When this completes, the
+  // daemon will be destroyed.
+  //
+  // If the close completes asynchronously, this could be called more than once
+  // while the close is occurring, which has no effect.
+  if (daemon->rs)
+    hsk_rs_close(daemon->rs, (void *)daemon, hsk_daemon_after_close);
+  else {
+    // The recursive nameserver was never created, destroy now.
+    hsk_daemon_after_close((void *)daemon);
+  }
+}
+
+static void
+hsk_daemon_after_close(void *data) {
+  hsk_daemon_t *daemon = (hsk_daemon_t *)data;
+
+  if (daemon->rs) {
+    hsk_rs_free(daemon->rs);
+    daemon->rs = NULL;
+  }
+
+  if (daemon->ns) {
+    hsk_ns_destroy(daemon->ns);
+    daemon->ns = NULL;
+  }
+
+  if (daemon->pool) {
+    hsk_pool_destroy(daemon->pool);
+    daemon->pool = NULL;
+  }
+
+  if (daemon->signals) {
+    hsk_signals_free(daemon->signals);
+    daemon->signals = NULL;
+  }
+}
+
+static void
+hsk_daemon_signal_shutdown(void *data) {
+  hsk_daemon_t *daemon = (hsk_daemon_t *)data;
+  hsk_daemon_close(daemon);
+}
+
+/*
+ * Main
+ */
+
+int
+main(int argc, char **argv) {
+  hsk_options_t opt;
+  hsk_options_init(&opt);
+
+  parse_arg(argc, argv, &opt);
+
+  int rc = HSK_SUCCESS;
+  uv_loop_t *loop = NULL;
+  hsk_daemon_t daemon;
+
+  if (opt.identity_key) {
+    if (!print_identity(opt.identity_key)) {
+      fprintf(stderr, "invalid identity key\n");
+      rc = HSK_EFAILURE;
+      goto done;
+    }
+  }
+
+  loop = uv_default_loop();
+
+  if (!loop) {
+    fprintf(stderr, "failed initializing loop\n");
+    rc = HSK_EFAILURE;
+    goto done;
+  }
+
+  rc = hsk_daemon_init(&daemon, loop, &opt);
+  if (rc != HSK_SUCCESS) {
+    fprintf(stderr, "failed initializing daemon: %s\n", hsk_strerror(rc));
+    goto done;
+  }
+
+  rc = hsk_daemon_open(&daemon, &opt);
+  if (rc != HSK_SUCCESS) {
+    fprintf(stderr, "failed starting daemon: %s\n", hsk_strerror(rc));
     goto done;
   }
 
@@ -506,17 +622,15 @@ main(int argc, char **argv) {
   }
 
 done:
-  if (rs)
-    hsk_rs_destroy(rs);
-
-  if (ns)
-    hsk_ns_destroy(ns);
-
-  if (pool)
-    hsk_pool_destroy(pool);
+  if (loop) {
+    if (!hsk_daemon_destroyed(&daemon)) {
+      hsk_daemon_close(&daemon);
+      // Run the event loop until the potentially-asynchronous close completes.
+      uv_run(loop, UV_RUN_DEFAULT);
+    }
 
-  if (loop)
     uv_loop_close(loop);
+  }
 
   return rc;
 }
diff --git a/src/rs.c b/src/rs.c
index 44f290f..d7ba479 100644
--- a/src/rs.c
+++ b/src/rs.c
@@ -53,6 +53,9 @@ static void
 alloc_buffer(uv_handle_t *handle, size_t size, uv_buf_t *buf);
 
 static void
+after_worker_stop(void *data);
+
+static void
 after_send(uv_udp_send_t *req, int status);
 
 static void
@@ -110,6 +113,7 @@ hsk_rs_init(hsk_rs_t *ns, const uv_loop_t *loop, const struct sockaddr *stub) {
   memset(ns->read_buffer, 0x00, sizeof(ns->read_buffer));
   ns->bound = false;
   ns->receiving = false;
+  ns->stop_callback = NULL;
 
   if (stub) {
     err = HSK_EFAILURE;
@@ -281,10 +285,13 @@ hsk_rs_open(hsk_rs_t *ns, const struct sockaddr *addr) {
 
   ns->receiving = true;
 
-  ns->rs_worker = hsk_rs_worker_alloc(ns->loop, ns->ub);
+  ns->rs_worker = hsk_rs_worker_alloc(ns->loop, (void *)ns, after_worker_stop);
   if (!ns->rs_worker)
     return HSK_EFAILURE;
 
+  if (hsk_rs_worker_open(ns->rs_worker, ns->ub) != HSK_SUCCESS)
+    return HSK_EFAILURE;
+
   char host[HSK_MAX_HOST];
   assert(hsk_sa_to_string(addr, host, HSK_MAX_HOST, HSK_NS_PORT));
 
@@ -294,32 +301,19 @@ hsk_rs_open(hsk_rs_t *ns, const struct sockaddr *addr) {
 }
 
 int
-hsk_rs_close(hsk_rs_t *ns) {
+hsk_rs_close(hsk_rs_t *ns, void *stop_data, void (*stop_callback)(void *)) {
   if (!ns)
     return HSK_EBADARGS;
 
-  if (ns->rs_worker) {
-    hsk_rs_worker_free(ns->rs_worker);
-    ns->rs_worker = NULL;
-  }
-
-  if (ns->receiving) {
-    if (uv_udp_recv_stop(&ns->socket) != 0)
-      return HSK_EFAILURE;
-    ns->receiving = false;
-  }
-
-  if (ns->bound) {
-    uv_close((uv_handle_t *)&ns->socket, after_close);
-    ns->bound = false;
-  }
-
-  ns->socket.data = NULL;
+  ns->stop_data = stop_data;
+  ns->stop_callback = stop_callback;
 
-  if (ns->ub) {
-    ub_ctx_delete(ns->ub);
-    ns->ub = NULL;
-  }
+  // If the worker is running, stop it, after_worker_stop is called
+  // asynchronously.  Otherwise, just call it directly.
+  if(ns->rs_worker && hsk_rs_worker_is_open(ns->rs_worker))
+    hsk_rs_worker_close(ns->rs_worker);
+  else
+    after_worker_stop((void *)ns);
 
   return HSK_SUCCESS;
 }
@@ -348,21 +342,6 @@ hsk_rs_free(hsk_rs_t *ns) {
   free(ns);
 }
 
-int
-hsk_rs_destroy(hsk_rs_t *ns) {
-  if (!ns)
-    return HSK_EBADARGS;
-
-  int rc = hsk_rs_close(ns);
-
-  if (rc != 0)
-    return rc;
-
-  hsk_rs_free(ns);
-
-  return HSK_SUCCESS;
-}
-
 static void
 hsk_rs_log(hsk_rs_t *ns, const char *fmt, ...) {
   printf("rs: ");
@@ -604,6 +583,40 @@ alloc_buffer(uv_handle_t *handle, size_t size, uv_buf_t *buf) {
 }
 
 static void
+after_worker_stop(void *data) {
+  hsk_rs_t *ns = (hsk_rs_t *)data;
+
+  if (ns->rs_worker) {
+    hsk_rs_worker_free(ns->rs_worker);
+    ns->rs_worker = NULL;
+  }
+
+  if (ns->receiving) {
+    uv_udp_recv_stop(&ns->socket);
+    ns->receiving = false;
+  }
+
+  if (ns->bound) {
+    uv_close((uv_handle_t *)&ns->socket, after_close);
+    ns->bound = false;
+  }
+
+  ns->socket.data = NULL;
+
+  if (ns->ub) {
+    ub_ctx_delete(ns->ub);
+    ns->ub = NULL;
+  }
+
+  // Grab these values, ns may be freed by this callback.
+  void *stop_data = ns->stop_data;
+  void (*stop_callback)(void *) = ns->stop_callback;
+  ns->stop_callback = NULL;
+
+  stop_callback(stop_data);
+}
+
+static void
 after_send(uv_udp_send_t *req, int status) {
   hsk_send_data_t *sd = (hsk_send_data_t *)req->data;
   hsk_rs_t *ns = sd->ns;
diff --git a/src/rs.h b/src/rs.h
index 05dad72..4fbd774 100644
--- a/src/rs.h
+++ b/src/rs.h
@@ -30,6 +30,8 @@ typedef struct {
   uint8_t read_buffer[4096];
   bool bound;
   bool receiving;
+  void *stop_data;
+  void (*stop_callback)(void *);
 } hsk_rs_t;
 
 /*
@@ -51,15 +53,14 @@ hsk_rs_set_key(hsk_rs_t *ns, const uint8_t *key);
 int
 hsk_rs_open(hsk_rs_t *ns, const struct sockaddr *addr);
 
+// Close the recursive name server.  This may complete asynchronously;
+// stop_callback is called when the name server can be destroyed.
 int
-hsk_rs_close(hsk_rs_t *ns);
+hsk_rs_close(hsk_rs_t *ns, void *stop_data, void (*stop_callback)(void *));
 
 hsk_rs_t *
 hsk_rs_alloc(const uv_loop_t *loop, const struct sockaddr *stub);
 
 void
 hsk_rs_free(hsk_rs_t *ns);
-
-int
-hsk_rs_destroy(hsk_rs_t *ns);
 #endif
diff --git a/src/rs_worker.c b/src/rs_worker.c
index 94d321b..f0faa8a 100644
--- a/src/rs_worker.c
+++ b/src/rs_worker.c
@@ -1,6 +1,7 @@
 #include "config.h"
 
 #include <assert.h>
+#include <stdarg.h>
 #include <stdint.h>
 #include <stdbool.h>
 #include <unbound.h>
@@ -8,6 +9,7 @@
 #include "dns.h"
 #include "error.h"
 #include "rs_worker.h"
+#include "utils.h"
 #include "uv.h"
 
 /*
@@ -16,8 +18,11 @@
 static void
 hsk_rs_worker_log(hsk_rs_worker_t *ns, const char *fmt, ...);
 
+static uv_async_t *
+alloc_async(hsk_rs_worker_t *worker, uv_loop_t *loop, uv_async_cb callback);
+
 static void
-after_close_free(uv_handle_t *handle);
+free_async(uv_async_t *async);
 
 static void
 run_unbound_worker(void *arg);
@@ -31,6 +36,9 @@ after_resolve_onthread(void *data, int status, struct ub_result *result);
 static void
 after_resolve_async(uv_async_t *async);
 
+static void
+after_quit_async(uv_async_t *async);
+
 /*
  * Response Queue
  */
@@ -124,13 +132,17 @@ hsk_rs_queue_enqueue(hsk_rs_queue_t *queue, hsk_rs_rsp_t *rsp) {
  * Response worker thread
  */
 int
-hsk_rs_worker_init(hsk_rs_worker_t *worker, uv_loop_t *loop, struct ub_ctx *ub) {
-  if (!worker || !loop || !ub)
+hsk_rs_worker_init(hsk_rs_worker_t *worker, uv_loop_t *loop, void *stop_data,
+                   void (*stop_callback)(void *)) {
+  if (!worker || !loop || !stop_callback)
     return HSK_EBADARGS;
 
   worker->rs_queue = NULL;
   worker->rs_async = NULL;
   worker->ub = NULL;
+  worker->cb_stop_data = stop_data;
+  worker->cb_stop_func = stop_callback;
+  worker->closing = false;
 
   worker->rs_queue = hsk_rs_queue_alloc();
   if (!worker->rs_queue) {
@@ -138,32 +150,13 @@ hsk_rs_worker_init(hsk_rs_worker_t *worker, uv_loop_t *loop, struct ub_ctx *ub)
     goto fail;
   }
 
-  // Allocate this separately on the heap because uv_close() is asynchronous.
-  worker->rs_async = malloc(sizeof(uv_async_t));
-  if (!worker->rs_async) {
-    hsk_rs_worker_log(worker, "out of memory");
-    goto fail;
-  }
-
-  // Initialize the async and set data if successful.  (This also indicates to
-  // the cleanup logic that the async needs to be closed.)
-  worker->rs_async->data = NULL;
-  if (uv_async_init(loop, worker->rs_async, after_resolve_async)) {
-    hsk_rs_worker_log(worker, "failed to create libuv async event");
+  worker->rs_async = alloc_async(worker, loop, after_resolve_async);
+  if (!worker->rs_async)
     goto fail;
-  }
-  worker->rs_async->data = (void *)worker;
 
-  // Start the worker thread.  Set unbound context to indicate that the thread
-  // is running.  If it starts, we can no longer write worker->ub until we sync
-  // up both threads again in _uninit().
-  worker->ub = ub;
-  if (uv_thread_create(&worker->rs_thread, run_unbound_worker, (void *)worker)) {
-    hsk_rs_worker_log(worker, "failed to create libuv worker thread");
-    // Failed to start, not running.
-    worker->ub = NULL;
+  worker->rs_quit_async = alloc_async(worker, loop, after_quit_async);
+  if (!worker->rs_quit_async)
     goto fail;
-  }
 
   return HSK_SUCCESS;
 
@@ -178,38 +171,15 @@ hsk_rs_worker_uninit(hsk_rs_worker_t *worker) {
   // Note that _uninit() is also used to clean up a partially-constructed
   // worker if _init() fails.
 
-  if (worker->ub) {
-    // We need to tell the libunbound worker to exit - wake up the thread and
-    // clear ub on that thread.
-    //
-    // libunbound doesn't give us a good way to do this, the only way is to
-    // issue a dummy query and do this in the callback on the worker thread.
-    //
-    // On Unix, we could poll unbound's file descriptor manually with another
-    // file descriptor to allow us to wake the thread another way.  On Windows
-    // though, libunbound does not provide any access to its WSAEVENT to do the
-    // same thing; there's no other way to do this.
-    int rc = ub_resolve_async(worker->ub, ".", HSK_DNS_NS, HSK_DNS_IN,
-                              (void *)worker, after_resolve_shutdown, NULL);
-    if (rc != 0)
-      hsk_rs_worker_log(worker, "cannot shut down worker thread: %s\n", ub_strerror(rc));
-    else
-      uv_thread_join(&worker->rs_thread);
-  }
+  // Can't destroy while still closing.
+  assert(!worker->closing);
 
-  if (worker->rs_async) {
-    // If it was also initialized, close it and free asynchronously
-    if (worker->rs_async->data) {
-      worker->rs_async->data = NULL;
-      uv_close((uv_handle_t *)worker->rs_async, after_close_free);
-      worker->rs_async = NULL;
-    }
-    else {
-      // Wasn't initialized, just free memory
-      free(worker->rs_async);
-      worker->rs_async = NULL;
-    }
-  }
+  // Can't destroy while worker is still running.
+  assert(!worker->ub);
+
+  free_async(worker->rs_quit_async);
+
+  free_async(worker->rs_async);
 
   if (worker->rs_queue) {
     hsk_rs_queue_free(worker->rs_queue);
@@ -217,13 +187,76 @@ hsk_rs_worker_uninit(hsk_rs_worker_t *worker) {
   }
 }
 
+int
+hsk_rs_worker_open(hsk_rs_worker_t *worker, struct ub_ctx *ub) {
+  // Can't open if closing or already open.
+  assert(!worker->closing);
+  assert(!worker->ub);
+
+  // Start the worker thread.  Set unbound context to indicate that the thread
+  // is running.  If it starts, we can no longer write worker->ub from this
+  // thread.
+  worker->ub = ub;
+  if (uv_thread_create(&worker->rs_thread, run_unbound_worker, (void *)worker)) {
+    hsk_rs_worker_log(worker, "failed to create libuv worker thread");
+    // Failed to start, not running.
+    worker->ub = NULL;
+    return HSK_EFAILURE;
+  }
+
+  return HSK_SUCCESS;
+}
+
+bool
+hsk_rs_worker_is_open(hsk_rs_worker_t *worker) {
+  // If we're closing, the worker is open, don't read ub.  Otherwise, we're open
+  // if ub is set.
+  return !worker->closing || worker->ub;
+}
+
+void
+hsk_rs_worker_close(hsk_rs_worker_t *worker) {
+  // No effect if already closing
+  if (worker->closing)
+    return;
+
+  // Must be open
+  assert(worker->ub);
+
+  // Can't read worker->ub any more from the main thread once we tell the thread
+  // to close.
+  worker->closing = true;
+
+  // We need to tell the libunbound worker to exit - wake up the thread and
+  // clear ub on that thread.
+  //
+  // libunbound doesn't give us a good way to do this, the only way is to
+  // issue a dummy query and do this in the callback on the worker thread.
+  //
+  // This works whether the request is successful or not.  As long as the
+  // authoritative server initialized, it'll complete quickly (even if it could
+  // not reach any peers).  If the authoritative server did not initialize, it
+  // will unfortunately wait for a timeout.
+  //
+  // On Unix, we could poll unbound's file descriptor manually with another
+  // file descriptor to allow us to wake the thread another way.  On Windows
+  // though, libunbound does not provide any access to its WSAEVENT to do the
+  // same thing; there's no other way to do this.
+  hsk_rs_worker_log(worker, "stopping libunbound worker...\n");
+  int rc = ub_resolve_async(worker->ub, ".", HSK_DNS_NS, HSK_DNS_IN,
+                            (void *)worker, after_resolve_shutdown, NULL);
+  if (rc != 0)
+    hsk_rs_worker_log(worker, "cannot stop worker thread: %s\n", ub_strerror(rc));
+}
+
 hsk_rs_worker_t *
-hsk_rs_worker_alloc(uv_loop_t *loop, struct ub_ctx *ub) {
+hsk_rs_worker_alloc(uv_loop_t *loop, void *stop_data,
+                    void (*stop_callback)(void *)) {
   hsk_rs_worker_t *worker = malloc(sizeof(hsk_rs_worker_t));
   if (!worker)
     return NULL;
 
-  if (hsk_rs_worker_init(worker, loop, ub) != HSK_SUCCESS) {
+  if (hsk_rs_worker_init(worker, loop, stop_data, stop_callback) != HSK_SUCCESS) {
     free(worker);
     return NULL;
   }
@@ -245,6 +278,10 @@ hsk_rs_worker_resolve(hsk_rs_worker_t *worker, char *name, int rrtype,
   if (!callback)
     return HSK_EBADARGS;
 
+  // Can't resolve when closing or not open
+  if (worker->closing || !worker->ub)
+    return HSK_EFAILURE;
+
   // Hold the callback data/func in a response object.  When the results come
   // in, we'll fill in the rest of this object and add it to the result queue.
   hsk_rs_rsp_t *rsp = malloc(sizeof(hsk_rs_rsp_t));
@@ -274,9 +311,33 @@ hsk_rs_worker_log(hsk_rs_worker_t *worker, const char *fmt, ...) {
   va_end(args);
 }
 
+static uv_async_t *
+alloc_async(hsk_rs_worker_t *worker, uv_loop_t *loop, uv_async_cb callback) {
+  uv_async_t *async = malloc(sizeof(uv_async_t));
+  if (!async) {
+    hsk_rs_worker_log(worker, "out of memory");
+    return NULL;
+  }
+  async->data = NULL;
+
+  // Initialize the async
+  if (uv_async_init(loop, async, callback)) {
+    hsk_rs_worker_log(worker, "failed to create libuv async event");
+    free(async);
+    return NULL;
+  }
+
+  async->data = (void *)worker;
+
+  return async;
+}
+
 static void
-after_close_free(uv_handle_t *handle) {
-  free(handle);
+free_async(uv_async_t *async) {
+  if(async) {
+    async->data = NULL;
+    hsk_uv_close_free((uv_handle_t *)async);
+  }
 }
 
 static void
@@ -286,6 +347,8 @@ run_unbound_worker(void *arg) {
   while(worker->ub) {
     ub_wait(worker->ub);
   }
+
+  uv_async_send(worker->rs_quit_async);
 }
 
 static void
@@ -296,8 +359,9 @@ after_resolve_shutdown(void *data, int status, struct ub_result *result) {
 
   // Clear this to stop the worker event loop.  This is safe because we've
   // synced up both threads to ensure they're not reading this - the main thread
-  // won't read it any more at all (it's just going to wait for the worker to
-  // exit with a _join()), and we're inside a ub_wait() on the worker thread.
+  // won't read it any more at all (it's waiting for the worker thread to exit
+  // after _close() was called), and we're inside a ub_wait() on the worker
+  // thread.
   worker->ub = NULL;
 }
 
@@ -325,10 +389,10 @@ after_resolve_onthread(void *data, int status, struct ub_result *result) {
 
 static void
 after_resolve_async(uv_async_t *async) {
-  hsk_rs_worker_t *worker = async->data;
+  hsk_rs_worker_t *worker = (hsk_rs_worker_t *)async->data;
 
   // Since uv_close() is async, it might be possible to process this event after
-  // the worker is shut down but before the async is closed.
+  // the worker is destroyed but before the async is closed.
   if(!worker)
     return;
 
@@ -345,3 +409,19 @@ after_resolve_async(uv_async_t *async) {
     rsp = hsk_rs_queue_dequeue(worker->rs_queue);
   }
 }
+
+static void
+after_quit_async(uv_async_t *async) {
+  hsk_rs_worker_t *worker = (hsk_rs_worker_t *)async->data;
+
+  // Should never get this after worker is destroyed, the worker can't be
+  // destroyed until _close() completes.
+  assert(worker);
+
+  worker->closing = false;
+
+  hsk_rs_worker_log(worker, "libunbound worker stopped\n");
+
+  // worker may be freed by this callback.
+  worker->cb_stop_func(worker->cb_stop_data);
+}
diff --git a/src/rs_worker.h b/src/rs_worker.h
index 3e4c16b..9143856 100644
--- a/src/rs_worker.h
+++ b/src/rs_worker.h
@@ -29,12 +29,25 @@ typedef struct {
 typedef struct {
   // Queue of results received from libunbound.
   hsk_rs_queue_t *rs_queue;
-  // Async used to signal back to the libuv event loop.
+  // Async used to signal results back to the libuv event loop.
   uv_async_t *rs_async;
+  // Async used to signal that the worker thread is quitting (the worker can be
+  // destroyed now)
+  uv_async_t *rs_quit_async;
   uv_thread_t rs_thread;
+  // Stop callback and data
+  void *cb_stop_data;
+  void (*cb_stop_func)(void *);
   // The unbound context processed by the worker thread.  Indicates whether the
   // worker thread event loop is running.
+  // Once the worker is started, both threads will read this variable, so it
+  // can't be modified before _close() is called (closing prevents the main
+  // thread from reading it, and _close() wakes the worker to have it clear ub
+  // and return).
   struct ub_ctx *ub;
+  // Indicates that we've signaled the worker thread to exit (we can no longer
+  // read ub).
+  bool closing;
 } hsk_rs_worker_t;
 
 // Response data from libunbound - used to queue responses back to the libuv
@@ -63,17 +76,33 @@ struct _hsk_rs_rsp_t {
 // libunbound context to process on the worker thread.  This starts the worker
 // thread.
 int
-hsk_rs_worker_init(hsk_rs_worker_t *worker, uv_loop_t *loop, struct ub_ctx *ub);
+hsk_rs_worker_init(hsk_rs_worker_t *worker, uv_loop_t *loop, void *stop_data,
+                   void (*stop_callback)(void *));
 
 void
 hsk_rs_worker_uninit(hsk_rs_worker_t *worker);
 
 hsk_rs_worker_t *
-hsk_rs_worker_alloc(uv_loop_t *loop, struct ub_ctx *ub);
+hsk_rs_worker_alloc(uv_loop_t *loop, void *stop_data,
+                    void (*stop_callback)(void *));
 
 void
 hsk_rs_worker_free(hsk_rs_worker_t *worker);
 
+int
+hsk_rs_worker_open(hsk_rs_worker_t *worker, struct ub_ctx *ub);
+
+bool
+hsk_rs_worker_is_open(hsk_rs_worker_t *worker);
+
+// Close the worker.  The worker must be closed after it's successfully opened,
+// and it can't be destroyed until the close completes (indicated by calling the
+// stop_callback passed to _alloc()/_init()).
+//
+// Once _close() is called, calls to _resolve() will fail synchronously.
+void
+hsk_rs_worker_close(hsk_rs_worker_t *worker);
+
 // Resolve a name.  The name, rrtype, and rrclass parameters are passed through
 // to libunbound.  The result callback occurs in the libuv event loop.  When the
 // callback occurs, ownership of the ub_result is passed to the callback.
diff --git a/src/signals.c b/src/signals.c
new file mode 100644
index 0000000..731fb0d
--- /dev/null
+++ b/src/signals.c
@@ -0,0 +1,124 @@
+#include "config.h"
+
+#include "error.h"
+#include "signals.h"
+#include "utils.h"
+
+/*
+ * Prototypes
+ */
+static uv_signal_t *
+alloc_signal(hsk_signals_t *signals, uv_loop_t *loop, int signum);
+
+static void
+free_signal(uv_signal_t *signal);
+
+static void
+signal_handler(uv_signal_t *signal, int signum);
+
+/*
+ * Signal handler
+ */
+int
+hsk_signals_init(hsk_signals_t *signals, uv_loop_t *loop, void *data,
+                 void (*callback)()) {
+  if (!signals || !loop || !callback)
+    return HSK_EBADARGS;
+
+  signals->cb_data = data;
+  signals->cb_func = callback;
+
+  signals->sigint = alloc_signal(signals, loop, SIGINT);
+  if (!signals->sigint)
+    goto fail;
+
+  signals->sigterm = alloc_signal(signals, loop, SIGTERM);
+  if (!signals->sigterm)
+    goto fail;
+
+  return HSK_SUCCESS;
+
+fail:
+  hsk_signals_uninit(signals);
+
+  return HSK_EFAILURE;
+}
+
+void
+hsk_signals_uninit(hsk_signals_t *signals) {
+  free_signal(signals->sigterm);
+  signals->sigterm = NULL;
+  free_signal(signals->sigint);
+  signals->sigterm = NULL;
+}
+
+hsk_signals_t *
+hsk_signals_alloc(uv_loop_t *loop, void *data, void (*callback)()) {
+  hsk_signals_t *signals = malloc(sizeof(hsk_signals_t));
+  if (!signals)
+    return NULL;
+
+  if (hsk_signals_init(signals, loop, data, callback) != HSK_SUCCESS) {
+    free(signals);
+    return NULL;
+  }
+
+  return signals;
+}
+
+void
+hsk_signals_free(hsk_signals_t *signals) {
+  if (signals) {
+    hsk_signals_uninit(signals);
+    free(signals);
+  }
+}
+
+static uv_signal_t *
+alloc_signal(hsk_signals_t *signals, uv_loop_t *loop, int signum) {
+  // Allocate the signal
+  uv_signal_t *signal = malloc(sizeof(uv_signal_t));
+  if (!signal)
+    return NULL;
+
+  signal->data = NULL;
+
+  // Init the signal
+  if (uv_signal_init(loop, signal)) {
+    free(signal);
+    return NULL;
+  }
+
+  if (uv_signal_start(signal, signal_handler, signum))
+  {
+    // Free after async close
+    hsk_uv_close_free((uv_handle_t *)signal);
+    return NULL;
+  }
+
+  signal->data = (void *)signals;
+
+  return signal;
+}
+
+static void
+free_signal(uv_signal_t *signal) {
+  if (signal) {
+    signal->data = NULL;
+    uv_signal_stop(signal);
+    hsk_uv_close_free((uv_handle_t *)signal);
+  }
+}
+
+static void
+signal_handler(uv_signal_t *signal, int signum) {
+  hsk_signals_t *signals = (hsk_signals_t *)signal->data;
+
+  // Due to async close, might be possible to receive this after _uninit()
+  if (!signals)
+    return;
+
+  printf("signal: %d\n", signum);
+
+  signals->cb_func(signals->cb_data);
+}
diff --git a/src/signals.h b/src/signals.h
new file mode 100644
index 0000000..3e608ba
--- /dev/null
+++ b/src/signals.h
@@ -0,0 +1,40 @@
+#ifndef _HSK_SIGNALS_H_
+#define _HSK_SIGNALS_H_
+
+#include <stdint.h>
+#include <stdbool.h>
+
+#include "signals.h"
+#include "uv.h"
+
+/*
+ * Types
+ */
+typedef struct {
+  void *cb_data;
+  void (*cb_func)(void *);
+  uv_signal_t *sigint;
+  uv_signal_t *sigterm;
+} hsk_signals_t;
+
+/*
+ * Signal handler
+ *
+ * Handles SIGINT and SIGTERM signals.  When one of these signals occurs, the
+ * callback given is called in the libuv event loop.  (The callback should shut
+ * down the process.)
+ */
+int
+hsk_signals_init(hsk_signals_t *signals, uv_loop_t *loop, void *data,
+                 void (*callback)());
+
+void
+hsk_signals_uninit(hsk_signals_t *signals);
+
+hsk_signals_t *
+hsk_signals_alloc(uv_loop_t *loop, void *data, void (*callback)());
+
+void
+hsk_signals_free(hsk_signals_t *signals);
+
+#endif
diff --git a/src/utils.c b/src/utils.c
index 746042e..174fd99 100644
--- a/src/utils.c
+++ b/src/utils.c
@@ -8,6 +8,8 @@
 #include <stdlib.h>
 #include <time.h>
 
+#include "uv.h"
+
 // Taken from:
 // https://github.com/wahern/dns/blob/master/src/dns.c
 #ifndef _HSK_RANDOM
@@ -224,3 +226,14 @@ hsk_to_lower(char *name) {
     s += 1;
   }
 }
+
+static void
+after_close_free(uv_handle_t *handle) {
+  free(handle);
+}
+
+void
+hsk_uv_close_free(uv_handle_t *handle) {
+  if (handle)
+    uv_close(handle, after_close_free);
+}
diff --git a/src/utils.h b/src/utils.h
index 9c52b73..9d4f11b 100644
--- a/src/utils.h
+++ b/src/utils.h
@@ -5,6 +5,8 @@
 #include <stdbool.h>
 #include <stdlib.h>
 
+#include "uv.h"
+
 int64_t
 hsk_now(void);
 
@@ -51,4 +53,11 @@ hsk_hex_decode(const char *str, uint8_t *data);
 
 void
 hsk_to_lower(char *name);
+
+// Close and then free a libuv handle (with free()).
+// libuv specifically documents that the handle memory cannot be freed until the
+// async close callback is invoked, so this frees the handle in that callback.
+void
+hsk_uv_close_free(uv_handle_t *handle);
+
 #endif
-- 
2.7.4

